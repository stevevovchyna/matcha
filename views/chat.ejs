<%include partials/header%>
<%
	var userno = 0;
	if (currentUser._id.toString() === conversation.participants[0]._id.toString()) { userno = 1; }
%>
<div class="container">
	<!-- <div>
		<a href="/conversations"><button type="button" class="btn btn-info">Back</button></a>
	</div> -->
		<h3>Conversation with <%=conversation.participants[userno].username%></h3>
	<div id="messages" class="list-group">
		<%messages.forEach(message => {%>
			<% var newMessageClass = ""; 
				if (!message.isRead) {
					if (message.sentBy._id.toString() !== currentUser._id.toString()) {
						newMessageClass = "myNewMessage";
					} else {
						newMessageClass = "newMessage";
					}
				}%>
			<a class="list-group-item <%=newMessageClass%>">
				<h4 class="list-group-item-heading"><%=message.sentBy.username%></h4>
				<small class="pull-right"><%=moment(message.createdAt).fromNow()%></small>
				<p class="list-group-item-text"><%=message.body%></p>
			</a>
		<%})%>
	</div>
	<form id="form">
		<div class="input-group">
			<input id="message" class="form-control" placeholder="Type your message here..." />
			<span class="input-group-btn">
				<button class="send_message btn btn-default">Send</button>
			</span>
		</div>
	</form>
</div>
<script src="https://cdn.jsdelivr.net/gh/rexeze/formatTimeStamp/src/index-cdn.js"></script>

<script>
var socket = io('/chat');
var room = "<%=conversation._id%>";
var messages = document.getElementById("messages");

socket.on('connect', () => {
   // Connected, let's sign-up for to receive messages for this room
   socket.emit('connectToRoom', room);
});

(() => {
	setTimeout(() => { $(".myNewMessage").removeClass("myNewMessage")}, 3000);
	$("form").submit(e => {
		e.preventDefault(); // prevents page reloading
		socket.emit("chat message", room, {
			message: $("#message").val(),
			authorName: "<%=currentUser.username%>",
			authorId: "<%=currentUser._id%>"
		}, (ret) => {
			var a = document.createElement("a");
			a.setAttribute('class', 'list-group-item newMessage');
			a.innerHTML = '<h4 class="list-group-item-heading"><%=currentUser.username%></h4><small class="pull-right">a moment ago</small><p class="list-group-item-text">'+$("#message").val()+'</p>';
			messages.appendChild(a);
			$("#message").val("");
			if (ret) {
				console.log(ret);
				setTimeout(() => { $(".newMessage").toggleClass("newMessage");}, 3000);
			}
		});
		return false;
	});
	socket.on("received", data => {
		var a = document.createElement("a");
		var messages = document.getElementById("messages");
		a.setAttribute('class', 'list-group-item newMessage');
		a.innerHTML = '<h4 class="list-group-item-heading">' + data.user + '</h4><small class="pull-right">a moment ago</small><p class="list-group-item-text">' + data.message + '</p>';
		messages.appendChild(a);
		setTimeout(() => { $(".newMessage").toggleClass("newMessage");}, 3000);
	});
	socket.on("read", data => {
		console.log("sosi!");
		// $(".newMessage").toggleClass("newMessage");
		setTimeout(() => { $(".newMessage").removeClass("newMessage");}, 3000);
	})
})();

// fetching initial chat messages from the database
// (() => {
// 	fetch("/conversations/" + "<%=conversation._id%>")
// 	.then(data => {
// 		return data.json();
//     })
//     .then(json => {
// 		json.map(data => {
// 			let li = document.createElement("li");
// 			let span = document.createElement("span");
// 			messages.appendChild(li).
// 			append(data.body);
// 			messages.appendChild(span).
// 			append("by " + data.sentBy.username + ": " + formatTimeAgo(data.createdAt));
// 		});
// 	});
// })();

// var socket = io();
// var messages = document.getElementById("messages");

// (function() {
//   $("form").submit(function(e) {
//     let li = document.createElement("li");
//     e.preventDefault(); // prevents page reloading
//     socket.emit("chat message", $("#message").val());

//     messages.appendChild(li).append($("#message").val());
//     let span = document.createElement("span");
// 	messages.appendChild(span).append("by " + "<%=currentUser.username%>" + ": " + "just now");

//     $("#message").val("");

//     return false;
//   });

//   socket.on("received", data => {
//     let li = document.createElement("li");
//     let span = document.createElement("span");
//     var messages = document.getElementById("messages");
//     messages.appendChild(li).append(data.message);
//     messages.appendChild(span).append("by " + data.user + ": " + "just now");
//   });
// })();

// // fetching initial chat messages from the database
// (function() {
//   fetch("/chat")
//     .then(data => {
//       return data.json();
//     })
//     .then(json => {
//       json.map(data => {
//         let li = document.createElement("li");
//         let span = document.createElement("span");
//         messages.appendChild(li).append(data.body);
//         messages
//           .appendChild(span)
//           .append("by " + data.sentBy.username + ": " + formatTimeAgo(data.createdAt));
//       });
//     });
// })();

// //is typing...

// let messageInput = document.getElementById("message");
// let typing = document.getElementById("typing");

// //isTyping event
// messageInput.addEventListener("keypress", () => {
//   socket.emit("typing", { user: "Someone", message: "is typing..." });
// });

// socket.on("notifyTyping", data => {
//   typing.innerText = data.user + " " + data.message;
//   console.log(data.user + data.message);
// });

// //stop typing
// messageInput.addEventListener("keyup", () => {
//   socket.emit("stopTyping", "");
// });

// socket.on("notifyStopTyping", () => {
//   typing.innerText = "";
// });
</script>
<%include partials/footer%>
